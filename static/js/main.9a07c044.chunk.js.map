{"version":3,"sources":["store/chat-reducer.tsx","Api/Api.ts","selectors/selectors.ts","pages/Main.tsx","components/TextInput/TextInput.tsx","components/Chatlog/ChatLog.tsx","App.tsx","reportWebVitals.ts","store/store.tsx","index.tsx","components/Chatlog/ChatLog.module.scss","components/TextInput/TextInput.module.scss","pages/Main.module.scss"],"names":["ActionType","socket","io","api","createConnection","this","subscribe","initMessageHandler","newMessageHandler","userTypingHandler","initUser","on","destroyConnection","disconnect","sentName","name","emit","sentMessage","message","typeMessage","initialState","messages","typingUsers","changeName","type","APP_CHANGE_NAME","dispatch","MESSAGES_RECEIVED","messagesReceived","NEW_MESSAGE","newMessages","user","ADD_TYPING_USER","typingUserAdded","APP_INIT_USER","initUserAdded","selectChangeName","state","chat","selectInitUser","Main","useDispatch","useState","setName","errorName","setErrorName","errorNameStr","setErrorNameStr","dissable","setDissable","useSelector","history","useHistory","useEffect","setTimeout","push","className","style","main","value","onChange","e","currentTarget","trim","disabled","onClick","setClientName","TextInput","errorMesStr","setErrorMesStr","errorMes","setErrorMes","setValue","mainText","wrapper","onKeyPress","ChatLog","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","typengUseers","messagesAnchorRef","useRef","console","log","current","scrollIntoView","behavior","chatMain","container","windowChat","onScroll","event","maxScrollPosition","scrollHeight","clientHeight","absPosition","Math","abs","scrollTop","scrollHandler","map","m","id","typeng","ref","to","App","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","filter","u","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9a07c044.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {api} from \"../Api/Api\";\r\n\r\nexport interface stateProps {\r\n    messages: messageType[]\r\n    typingUsers: UserType[]\r\n    changeName:boolean\r\n    initUser: null | UserType\r\n}\r\n\r\nexport interface messageType {\r\n    message: string\r\n    id: string\r\n    user: UserType\r\n}\r\nexport interface UserType {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst initialState: stateProps = {\r\n    messages: [] as Array<messageType>,\r\n    typingUsers: [] as Array<UserType>,\r\n    changeName: false,\r\n    initUser: null\r\n}\r\n\r\n//Type\r\nexport enum ActionType {\r\n    MESSAGES_RECEIVED = 'MESSAGES_RECEIVED',\r\n    NEW_MESSAGE = \"NEW_MESSAGE\",\r\n    ADD_TYPING_USER = \"ADD_TYPING_USER\",\r\n    APP_CHANGE_NAME = \"APP_CHANGE_NAME\",\r\n    APP_INIT_USER = \"APP_INIT_USER\",\r\n\r\n}\r\n\r\nexport const chatReducer = (state: stateProps = initialState, action: chatType): stateProps => {\r\n    switch (action.type) {\r\n        case ActionType.MESSAGES_RECEIVED: {\r\n            return {...state, ...action.messages}\r\n        }\r\n        case ActionType.NEW_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                messages: [\r\n                    ...state.messages, action.message\r\n                ],\r\n                typingUsers: state.typingUsers.filter(u => u.id !== action.message.user.id)\r\n\r\n            }\r\n        }\r\n        case ActionType.ADD_TYPING_USER:\r\n            return {\r\n                ...state, typingUsers:[...state.typingUsers.filter(u => u.id !== action.user.id), action.user]\r\n            }\r\n        case ActionType.APP_CHANGE_NAME: {\r\n            return {\r\n                ...state, changeName:action.changeName\r\n            }\r\n        }\r\n        case ActionType.APP_INIT_USER:\r\n            return {\r\n                ...state, initUser: action.user\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst messagesReceived = (messages: messageType[]) => ({type: ActionType.MESSAGES_RECEIVED, messages}as const)\r\nconst changeName = (changeName: boolean) => ({type: ActionType.APP_CHANGE_NAME, changeName}as const)\r\n\r\nconst newMessages = (message: messageType) => ({\r\n    type: ActionType.NEW_MESSAGE,\r\n    message\r\n}as const)\r\nconst typingUserAdded = (user: UserType) => ({type:ActionType.ADD_TYPING_USER, user} as const)\r\nconst initUserAdded = (user: UserType) => ({type:ActionType.APP_INIT_USER, user} as const)\r\ntype chatType = ReturnType<typeof messagesReceived> | ReturnType<typeof newMessages> |\r\n    ReturnType<typeof typingUserAdded>|\r\n    ReturnType<typeof initUserAdded>|\r\n    ReturnType<typeof changeName>\r\nexport const createConnection = () => (dispatch: Dispatch) => {\r\n    api.createConnection()\r\n    api.subscribe(\r\n        messages => {\r\n            dispatch(messagesReceived(messages))\r\n        }, message => {\r\n            dispatch(newMessages(message))\r\n        }, user => {\r\n          dispatch(typingUserAdded(user))\r\n        },\r\n        user => {\r\n            dispatch(initUserAdded(user))\r\n        }\r\n    )\r\n}\r\nexport const destroyConnection = () => (dispatch: Dispatch) => {\r\n    api.destroyConnection()\r\n    dispatch(changeName(false))\r\n}\r\nexport const setClientName = (name:string) => (dispatch: Dispatch) => {\r\n   api.sentName(name)\r\n    dispatch(changeName(true))\r\n}\r\nexport const setClientMessage = (message:string) => (dispatch: Dispatch) => {\r\n    api.sentMessage(message)\r\n}\r\nexport const typeMessage = () => (dispatch:Dispatch) => {\r\n    api.typeMessage()\r\n}\r\n","import io from \"socket.io-client\";\r\nimport {messageType, UserType} from \"../store/chat-reducer\";\r\n\r\n\r\n// const socket = io('http://localhost:3009/')\r\nconst socket = io('https://chat-back-test.herokuapp.com/')\r\n\r\n\r\nexport const api = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n    createConnection() {\r\n        this.socket = socket\r\n    },\r\n    subscribe(\r\n        initMessageHandler: (messages: messageType[]) => void,\r\n        newMessageHandler: (message: messageType) => void,\r\n        userTypingHandler: (user: UserType) => void,\r\n        initUser: (message: UserType) => void) {\r\n        this.socket?.on('messages-init', initMessageHandler)\r\n        this.socket?.on('new-message-sent', newMessageHandler)\r\n        this.socket?.on('user-typing', userTypingHandler)\r\n        this.socket?.on('set_user', initUser)\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect()\r\n        this.socket = null\r\n    },\r\n    sentName(name: string) {\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n    sentMessage(message: string) {\r\n        this.socket?.emit('client-message-sent', message)\r\n    },\r\n    typeMessage() {\r\n        this.socket?.emit('client-typed')\r\n    },\r\n\r\n}","import {AppRootStateType} from \"../store/store\";\r\n\r\nexport const selectChangeName = (state: AppRootStateType) => state.chat.changeName\r\nexport const selectInitUser = (state: AppRootStateType) => state.chat.initUser","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {setClientName} from \"../store/chat-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {selectChangeName} from '../selectors/selectors';\r\nimport style from './Main.module.scss'\r\nconst Main: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const [name, setName] = useState('')\r\n    const [errorName, setErrorName] = useState<boolean>(false)\r\n    const [errorNameStr, setErrorNameStr] = useState<string | null>(null)\r\n    const [dissable, setDissable] = useState<boolean>(false)\r\n    const changeName = useSelector(selectChangeName)\r\n    const changeNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value.trim() !== '') {\r\n            setErrorName(false)\r\n            setErrorNameStr(null)\r\n        }\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            if (changeName) {\r\n                setDissable(false)\r\n                history.push('chat')\r\n            }\r\n        }, 2000)\r\n    }, [changeName, history])\r\n\r\n\r\n    function onSentNameHandler() {\r\n        if (name === '') {\r\n            setErrorName(true)\r\n            setErrorNameStr('Заполните поле')\r\n        } else {\r\n            setDissable(true)\r\n            dispatch(setClientName(name))\r\n\r\n            setName('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.main}>\r\n            <h1>Добро пожаловать</h1>\r\n            <div>\r\n                <span>Представьтесь</span> <input value={name} onChange={changeNameHandler}/>\r\n                <button disabled={dissable} onClick={onSentNameHandler}>Save</button>\r\n                {errorName ? <span>{errorNameStr}</span> : null}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;","import React, {ChangeEvent, useState} from 'react';\r\nimport style from './TextInput.module.scss'\r\nimport {setClientMessage, typeMessage} from \"../../store/chat-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nconst TextInput = () => {\r\n    const [errorMesStr, setErrorMesStr] = useState<string | null>(null)\r\n\r\n    const [errorMes, setErrorMes] = useState<boolean>(false)\r\n    const [value, setValue] = useState('hello')\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => {\r\n        if (value === '') {\r\n            setErrorMes(true)\r\n            setErrorMesStr('Заполните поле')\r\n        } else {\r\n            dispatch(setClientMessage(value))\r\n            setValue('')\r\n        }\r\n    }\r\n    const changeValueHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget.value.trim() !== '') {\r\n            setErrorMes(false)\r\n            setErrorMesStr(null)\r\n        }\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div className={style.mainText}>\r\n            <div className={style.wrapper}>\r\n                <textarea value={value} onChange={changeValueHandler} onKeyPress={() => {\r\n                    dispatch(typeMessage())\r\n                }}/>\r\n                <button onClick={onClickHandler}>Send</button>\r\n\r\n            </div>\r\n            <div>\r\n                {errorMes ? <span>{errorMesStr}</span> : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextInput;","import React, {useEffect, useRef, useState} from 'react';\r\nimport style from './ChatLog.module.scss'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport TextInput from '../TextInput/TextInput';\r\nimport {selectChangeName, selectInitUser} from \"../../selectors/selectors\";\r\nimport {Redirect} from \"react-router-dom\";\r\nconst ChatLog = () => {\r\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState<boolean>(true)\r\n    const [lastScrollTop, setLastScrollTop] = useState<number>(0)\r\n    const messages = useSelector((state: AppRootStateType) => state.chat.messages)\r\n    const typengUseers = useSelector((state: AppRootStateType) => state.chat.typingUsers)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const changeName = useSelector(selectChangeName)\r\n    const initUser = useSelector(selectInitUser)\r\n    console.log(initUser)\r\n    function scrollHandler(event: React.UIEvent<HTMLDivElement, UIEvent>) {\r\n        const maxScrollPosition = event.currentTarget.scrollHeight - event.currentTarget.clientHeight\r\n        const absPosition = Math.abs(maxScrollPosition - event.currentTarget.scrollTop)\r\n        if (event.currentTarget.scrollTop > lastScrollTop && absPosition < 10) {\r\n            setIsAutoScrollActive(true)\r\n        } else {\r\n            setIsAutoScrollActive(false)\r\n        }\r\n        setLastScrollTop(event.currentTarget.scrollTop)\r\n    }\r\n    useEffect(() => {\r\n        if (isAutoScrollActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages, isAutoScrollActive])\r\n    if (!changeName) return <Redirect to={'/'}/>\r\n    return (\r\n        <div className={style.chatMain}>\r\n            <div className={style.container}>\r\n                <div className={style.windowChat} onScroll={event => scrollHandler(event)}>\r\n                    {messages.map(m => {\r\n                        return (\r\n                            <div key={m.id} className={m.user.id === initUser?.id ? style['left'] : style['right']}>\r\n                                <b>{m.user.name} : </b> {m.message}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    {typengUseers.map(m => {\r\n                        return (\r\n                            <div key={m.id}>\r\n                                <b>{m.name} : </b> <span className={style.typeng}>... печатает</span>\r\n                                <hr/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <div ref={messagesAnchorRef}/>\r\n\r\n                </div>\r\n                <TextInput/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatLog;","import React, {useEffect} from 'react';\nimport './App.css';\nimport {useDispatch} from \"react-redux\";\nimport {createConnection, destroyConnection} from \"./store/chat-reducer\";\nimport {Route, Switch } from 'react-router-dom';\nimport Main from \"./pages/Main\";\nimport ChatLog from './components/Chatlog/ChatLog';\n\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(createConnection())\n        return () => {\n            dispatch(destroyConnection())\n        }\n    }, [])\n\n    return (\n        <>\n            <Switch>\n                <Route path={'/'} exact render={() => <Main/>}/>\n                <Route path={'/chat'} exact render={() => <ChatLog/>}/>\n            </Switch>\n\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {chatReducer} from \"./chat-reducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst reducer = combineReducers({\r\n    chat:chatReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducer>\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatMain\":\"ChatLog_chatMain__McZJ_\",\"container\":\"ChatLog_container__1PbzV\",\"windowChat\":\"ChatLog_windowChat__w57Sc\",\"left\":\"ChatLog_left__2UEES\",\"right\":\"ChatLog_right__1q5-U\",\"typeng\":\"ChatLog_typeng__1BqNj\",\"opacityToggle\":\"ChatLog_opacityToggle__hmKNw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainText\":\"TextInput_mainText__2Bbva\",\"wrapper\":\"TextInput_wrapper__2t3w7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__3spcO\"};"],"sourceRoot":""}